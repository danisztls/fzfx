#!/usr/bin/env bash
# fzf specialized functional fuzzy searches
# dependencies: fzf, ripgrep, fd, trash-cli 
# optionals: ripgrep-all, grc
printHelp() {
    printf "USAGE:
    \t\e[1m'hidden'\e[0m hidden files excluding .git and .cache;
    \t\e[1m'md'\e[0m markdown files;
    \t\e[1m'pdf'\e[0m pdf and postscript files;
    \t\e[1m'media'\e[0m videos and audio files;
    \t\e[1m'full'\e[0m full text search documents; 
    \t\e[1m'cd'\e[0m show and cd to sub-directories;
    \t\e[1m'ps'\e[0m show and manage processes.\n"
}
# SETTINGS
configDir="${XDG_CONFIG_HOME:-"$HOME/.config"}"
# Load user configuration
configFile="$configDir/fzfx/config"
#shellcheck disable=SC1090
[ -f "$configFile" ] && source "$configFile"

# Load ignore file
ignoreFile="$configDir/fzfx/ignore"
[ -f "$ignoreFile" ] || ignoreFile="/usr/share/fzfx/ignore"

# Set editor: use $editor from config, otherwise, use $EDITOR, if defined, or whatever is available.
if ! [ "$editor" ]; then
    editors=(vi vim nvim nano)
    # shellcheck disable=SC2153
    if [ "$EDITOR" ]; then
        editor="$EDITOR"
    else
        for prog in "${editors[@]}"; do
            if [ "$(command -v "$prog")" ]; then
                # remove alias and path prefix
                editor=$(command -v "$prog" | sed 's/alias .*=//;s#.*/##')
            fi
        done
    fi
fi

# DEFAULTS
# f1 opens with xdg-open, f2 opens with text editor, f3 copy path to console clipboard,
# f4 echoes path to stdout, del move file to trash.
defaultBind="\
f1:execute-silent(xdg-open {} 2>/dev/null),\
f2:execute($editor {}),\
f3:execute-silent(xclip <<< {}),\
f4:accept,\
enter:execute(echo $root/{})+abort"
defaultHeader="f1 → default, f2 → editor, f3 → clipboard, f4 → terminal, del → delete"

if [ "$(command -v bat)" ]; then
    defaultPreview="bat --style=numbers --color=always --line-range :500 {}"
else
    defaultPreview="cat {}"
fi

defaultOpts="--preview-window=right:50%:wrap"

#defaultColors="
#dark,\
#bg+:#373e47,\
#bg:#2d333b,\
#spinner:#6bac00,\
#hl:#0087e9,\
#fg:#adbac7,\
#header:#009385,\
#info:#d9b600,\
#pointer:#b37eff,\
#marker:#cf2424,\
#fg+:#dddddd,\
#prompt:#d40059,\
#hl+:#ff5c00"

# Export Defaults
export FZF_DEFAULT_OPTS="$FZF_DEFAULT_OPTS --bind '$defaultBind' --header '$defaultHeader' --preview '$defaultPreview' $defaultOpts" #--colors $defaultColors

# LIB
# fd arguments:
# '-t' is type; '-uu' is a short for '--no-ignore' and '--hidden'; '-i' is '--ignore-case';
# '-g' is glob; '--no-ignore-cvs' don't ignore '.gitignore'; '--ignore-file' load an ignore file

_fzf() {
    export FZF_DEFAULT_COMMAND="$query"
    # shellcheck disable=SC2068
    fzf ${bind:+--bind "$bind"} ${preview:+--preview "$preview"} ${header:+--header "$header"} ${opts[@]} \
    --bind "del:reload(trash {} && $query)" # can't be on $defaultBind as $query need to be declared
}

fzfDefault() {
# DEFAULT: find almost anything
    local query="fd -t f -i --no-ignore-vcs --ignore-file $ignoreFile"
    _fzf
}

fzfHidden() {
# HIDDEN: find anything including hidden files
    local query="fd -t f -iuu"
    _fzf
}

fzfMd() {
# MD: find markdown notes
    local query="fd -t f -i -g '*.md' --no-ignore-vcs --ignore-file $ignoreFile"
    _fzf
}

fzfPdf() {
# PDF: find preview pdf and postscript files
    local query="fd -t f -i --no-ignore-vcs --ignore-file $ignoreFile '^.*\.(pdf|ps|eps)$'"
    local bind
    if [ "$pdfView" ]; then
        return
    elif [ "$(command -v evince)" ]; then
        pdfView="evince -w"
    else
        pdfView"xdg-open"
        local bind="enter:execute-silent($pdfView {} 2>/dev/null)"
    fi
    _fzf
}

fzfAv() {
# AV: find video and audio files 
    local query="fd -t f -i --no-ignore-vcs --ignore-file $ignoreFile '^.*\.(mkv|mp4|mtk|webm|avi|mp3|ogg|wav|wma|aac)$'"
    local bind
    if [ "$avView" ]; then
        return
    elif [ "$(command -v mpv)" ]; then
        avView="mpv --no-terminal --length=5" # autclose after 5s
    else
        avView="xdg-open"
    fi
    local bind="enter:execute-silent($avView {} 2>/dev/null)"
    local opts=(--preview-window hidden)
    _fzf
} 

fzfPic() {
# PIC: find pictures, video and audio files 
    local query="fd -t f -i --no-ignore-vcs --ignore-file $ignoreFile '^.*\.(mkv|mp4|webm|avi|webp|jpg|jpeg|png|gif)$'"
    if [ "$picView" ]; then
        return
    elif [ "$(command -v feh)"  ]; then
        picView="feh --scale-down --auto-zoom"
    else
        picView="xdg-open"
    fi
    local bind="enter:execute-silent($picView {} 2>/dev/null)"
    local opts=(--preview-window hidden)
    _fzf
} 

# shellcheck disable=SC2120
fzfFull() {
# FULL: search inside files
# $1 is returned by fzf
    local query="echo Type to search..."
    local preview
    if [[ $(command -v rga) ]]; then
        query_full="rga -i --files-with-matches --rga-adapters='-decompress,tar,zip,ffmpeg,sqlite' $1"
        preview="[[ ! -z {} ]] && rga --pretty --context 10 {q} {}"
    else
        query_full="rg -i --files-with-matches --no-messages $1"
        preview="rg --ignore-case --pretty --no-line-number --context 10 {q} {}"
    fi
    local bind="change:reload:$query_full {q}"
    local opts=(--sort --phony)
    _fzf
}

fzfCd() {
# FCD: search dirs and cd to them
    local query="fd -t d -i"
    local preview
    if [ "$(command -v tree)" ]; then
        preview="tree -C -c {} | head -200"
    else
        preview="ls --color=always {} | head -200"
    fi
    local header="f1 → browser, f2 → editor, enter → cd"
    _fzf
}

fzfPs() {
# FPS: search processes and manage them
# f1 term, f2 kill, f3 sleep, f4 wake
    local query="ps -Ao pid,cmd,%mem,%cpu,tt,user,time,stat"
    # if grc is installed append it to command prefix
    [ "$(command -v grc)" ] && query="grc --colour=on $query"
    # shellcheck disable=SC2031
    local opts=(--ansi --header-lines=1 --reverse --cycle --preview-window hidden)
    local bind="change:reload($query),\
f1:reload(kill -15 {1} && sleep 0.15 && $query),\
f2:reload(kill -9 {1} && sleep 0.15 && $query),\
f3:reload(kill -19 {1} && sleep 0.15 && $query),\
f4:reload(kill -18 {1} && sleep 0.15 && $query)"
    local header="f1 → SIGTERM, f2 → SIGKILL, f3 → SIGSTOP, f4 → SIGCONTv"
    _fzf
}

# MAIN
# Search from absolute path if root is set
# shellcheck disable=SC2154
if [ "$root" ]; then
    cd "$root" ||:
fi

case "$1" in
    help|-h|--help) printHelp;;
    hidden) fzfHidden;;
    md) fzfMd;;
    pdf) fzfPdf;;
    av) fzfAv;;
    pic) fzfPic;;
    full) fzfFull;;
    cd) fzfCd;;
    ps) fzfPs;;
    *) fzfDefault;;
esac
